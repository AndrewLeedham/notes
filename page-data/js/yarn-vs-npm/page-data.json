{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/js/yarn-vs-npm","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"published\": \"2021-02-24T22:12:03.284Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Yarn vs npm\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"Use yarn, mostly v1, embrace workspaces\\\"\")), mdx(\"p\", null, \"When I clone a JS/TS repo and it's not using yarn I usually assume the repo came from someone new to the JS ecosystem. Yarn came out a few years ago and npm is still playing catch-up on features. Originally a Facebook project, but nowadays is ran by non-Facebook folks. Over time, Yarn was re-written and focused on solving different problems than I am seeing.\"), mdx(\"p\", null, \"The npm contributors at the time probably considered creating Yarn a hostile move, but it offered a lot of features that were essential for reliably building apps. People in the JS ecosystem had dependency trees which were easily thousands of deps big but didn't even have a lockfile, bonkers. \"), mdx(\"p\", null, \"IMO, Yarn is the CLI developer experience I think all other bundler/dependency manager CLI's should strive for.\"), mdx(\"h3\", null, \"Great features\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/yarn-workspaces\",\n    \"title\": \"yarn-workspaces\"\n  }, \"[[yarn-workspaces]]\"), \" - is a great want to handle multiple contexts in one repo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yarn upgrade-interactive\"), \" is very impressive, especially when you have dependency trees the size of nodejs projects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The way that you can write \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/npm/rfcs/pull/279#issuecomment-748102000\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"yarn tsc\"), \" to run TypeScript\"), \" from your local dependencies is reason enough to use yarn's CLI even in npm projects  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://classic.yarnpkg.com/en/docs/selective-version-resolutions/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"\\\"resolutions\\\"\")), \" - solves huge JS dep tree problems very elegantly\")), mdx(\"h4\", null, \"Yarn 1 vs npm 7\"), mdx(\"p\", null, \"To be honest, enough changed in npm 7 that I'm not sure how many of my original arguments on yarn vs npm still hold. I've not upgraded locally in part because their \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.blog/2021-02-02-npm-7-is-now-generally-available/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"peerDependencies\")), \" change, and in other part because I don't use npm already and I think the CLI experience is worse. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.npmjs.com/cli/v7/commands/npm-exec\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"npm exec\")), \" is a good step forwards though. So now you can do:\"), mdx(\"pre\", {\n    \"className\": \"shiki\",\n    \"style\": {\n      \"backgroundColor\": \"#fff\",\n      \"color\": \"black\"\n    }\n  }, mdx(\"div\", {\n    parentName: \"pre\",\n    \"className\": \"language-id\"\n  }, \"sh\"), mdx(\"div\", {\n    parentName: \"pre\",\n    \"className\": \"code-container\"\n  }, mdx(\"code\", {\n    parentName: \"div\"\n  }, mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"$ yarn tap --bail test/foo.js\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#6A737D\"\n    }\n  }, \"# vs\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"$ npm \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"exec\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \" -- tap --bail test/foo.js\"))))), mdx(\"p\", null, \"Still not focused, but better than before  which used a completely different command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx\"), \".\"), mdx(\"h4\", null, \"Yarn 1 vs 2+\"), mdx(\"p\", null, \"The userbase of yarn is split because yarn 2 focused heavily on trying to remove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" folder \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://next.yarnpkg.com/features/pnp\"\n  }, \"with PNP\"), \" which was probably a mistake. Using PNP means yarn overriding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" statement which moves the node_modules into tar files in your repo. The tar files can then be put into your source control.\"), mdx(\"p\", null, \"I think people started to adopt yarn 2 once the team were very explicit that you could avoid PNP. PNP does solve a real problem, but its trade-offs aren't worth it and I would have still \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignored\"), \" it's version of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" somewhat negating the whole point.\"), mdx(\"p\", null, \"I've only moved two projects to yarn 2 (the TypeScript Website and my games) and I don't really gain much. On the net, it was probably a bit more of a negative but I needed some practical experience to make an opinion. After switching, I've got more random files in my repo (yarn config to remove PNP, the JS for the yarn 2 version, the JS for plugins) which I wouldn't have had I stayed on v1, my most used commands (outside of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn install\"), \") were moved to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/microsoft/TypeScript-Website/tree/v2/.yarn/plugins/%40yarnpkg\"\n  }, \"plugins\"), \" which I guess shows that my usage falls away from the mainstream and the CLI output is a mixed bag of some improvements (colour usage and logical grouping :+1:) and some negative \\\"YN0000\\\" et al.\"), mdx(\"p\", null, \"That said, I'd love to use yarn 2 everywhere because the plugin system for v2 is compelling. I'd like to build \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/crev-dev\"\n  }, \"yarn-crev\"), \") but it'd require moving any projects to use v2 before I can use the plugin (and the plugin would need wide-adoption to be useful) which makes it not worth putting the time in to build. \"), mdx(\"h4\", null, \"Yarn 1 vs PNPM\"), mdx(\"p\", null, \"I've made a few repos with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pnpm.js.org\"\n  }, \"pnpm\"), \" to get a sense of whether pnpm could be a replacement for yarn 1 for me. There's some interesting ideas in there. I wasn't a particular fan of having workspace config in it's own yml file vs the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" but that's pretty minor, but it copies npm's CLI experience for running scripts/binaries instead of yarn's which is more of a blocker. So, I've started a discussion about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pnpm/pnpm/discussions/3191\"\n  }, \"potentially moving\"), \".\"), mdx(\"h4\", null, \"Future\"), mdx(\"p\", null, \"Yarn 2+ is unlikely to be compelling enough to warrant all the extra files in every repo considering how yarn 1 works perfectly well for the task of getting deps, setting up complex projects and running commands with a great experience. \"), mdx(\"p\", null, \"Because using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" defaults to v1 means nearly all of the time I'll be using that version, which on the long run is a tad worrying because v1 isn't getting updates and support anymore. Though sometimes the lack of change can be a good thing. So I'll be sticking with v1 in nearly every repo.\"), mdx(\"p\", null, \"Given the lack of updates, it's possible that npm will now catch up with yarn 1, npm 7 has taken a lot of the good features of yarn 1 and within a few years maybe we'll see experienced JS folks people move back to npm. \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"- [[yarn-workspaces]] - is a great want to handle multiple contexts in one repo","target":{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Yarn Workspaces\"), mdx(\"p\", null, \"An abstraction absolutely worth learning, npm has replicated the feature in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.npmjs.com/cli/v7/using-npm/workspaces\"\n  }, \"npm 7\"), \".\"), mdx(\"p\", null, \"A yarn workspace is a way to chunk code together in a single repo. Some examples of how I use them:\"), mdx(\"h4\", null, \"TypeScript Website\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A section of docs is a workspace: handbook docs, tsconfig flags, codegen systems\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Individual npm modules like: @typescript/twoslash, gatsby-remark-twoslash-shiki, etc \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sections of the TS website which are imported as oldschool \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<script>\"), \" tags: playground, sandbox\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The static site generator itself\")), mdx(\"h4\", null, \"Capture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Azure functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Admin Dashboard \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"KISS Homepage\")), mdx(\"h4\", null, \"Puzzlebox\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Games\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web infra\")), mdx(\"p\", null, \"From there, I give all of the packages a script for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"bootstrap\\\"\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"build\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"test\\\"\"), \" - they can be NOOPs if it doesn't need it. \"), mdx(\"p\", null, \"My root \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" then has scripts like:\"), mdx(\"pre\", {\n    \"className\": \"shiki\",\n    \"style\": {\n      \"backgroundColor\": \"#fff\",\n      \"color\": \"black\"\n    }\n  }, mdx(\"div\", {\n    parentName: \"pre\",\n    \"className\": \"language-id\"\n  }, \"json\"), mdx(\"div\", {\n    parentName: \"pre\",\n    \"className\": \"code-container\"\n  }, mdx(\"code\", {\n    parentName: \"div\"\n  }, mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"{\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"  \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"\\\"scripts\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \": {\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"    \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"\\\"bootstrap\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \": \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#032F62\"\n    }\n  }, \"\\\"yarn workspaces foreach -v -t --exclude root run bootstrap && BOOTSTRAPPING=true yarn workspaces foreach -v -t --exclude root run build\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \",\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"    \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"\\\"start\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \": \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#032F62\"\n    }\n  }, \"\\\"yarn workspace typescriptlang-org stast\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \",\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"    \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"\\\"build\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \": \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#032F62\"\n    }\n  }, \"\\\"yarn workspaces foreach -v -t --exclude root --exclude typescriptlang-org run build\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \",\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"    \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#005CC5\"\n    }\n  }, \"\\\"build-site\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \": \"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#032F62\"\n    }\n  }, \"\\\"yarn workspace typescriptlang-org build\\\"\"), mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \",\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"  }\")), mdx(\"div\", {\n    parentName: \"code\",\n    \"className\": \"line\"\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"style\": {\n      \"color\": \"#24292E\"\n    }\n  }, \"}\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"e6db630f-e3d9-522e-9f96-cba145c804e8","fields":{"slug":"/js/yarn-workspaces","title":"Yarn Workspaces"}}}}],"inboundReferences":[]},"fields":{"slug":"/js/yarn-vs-npm","title":"Yarn vs npm"}}},"pageContext":{"id":"f8ce06d8-ba4a-54da-93a4-a5b020ef0638"}},"staticQueryHashes":["2221750479","2380733210","2768355698","433046095","63159454"]}