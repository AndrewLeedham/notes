{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/tests/testing-js","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How I test JS\"), mdx(\"p\", null, \"I used to write a lot more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"js/jest\",\n    \"title\": \"js/jest\"\n  }, \"[[js/jest]]\"), \" tests when I came to JavaScript, but over time I write less tests and rely on the TypeScript compiler more. I only interact with TypeScript or JSDoc-checked JS and so I know that I don't need to try and cover states which the compiler won't allow. \"), mdx(\"h3\", null, \"When to write a test\"), mdx(\"p\", null, \"Historically, I tend to mostly write codebases on my own, with occasional other contributors. So, my testing needs are not the same as those in persistent codebases with many team-members.\"), mdx(\"p\", null, \"I use tests as a communication pattern to future me, and rando contributors. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it was complex to write, it needs a test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it is complex to understand, it needs a test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If I got it wrong the first time, it needs a test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it lives in a complex system, it probably needs a test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it is easier to TDD it then build it in context, then TDD it\")), mdx(\"p\", null, \"The last one comes up quite a lot, it's often only a tiny bit of more upfront effort to set up the test suite instead of clicking a few buttons again and again to verify the results.  \"), mdx(\"h3\", null, \"What level of testing is needed?\"), mdx(\"p\", null, \"IMO there are a few different types of abstractions for tests:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unit (aka a function)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integration (aka a series of functions)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Commit (aka a git commit)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PR (aka a series of git commits)\")), mdx(\"p\", null, \"A well tested repo would have some thing which kinda hits all of these at different levels. For example on a current games project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Unit) Lots of jest tests for specific functions (distance from x, mouse pointer to tile-y kinda stuff)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Integration) Jest tests which send redux actions and validate the output state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Commit) \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"danger local\"), \" which checks for console.logs in changed files, and that there is no \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".only\"), \" in test files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(PR) CHANGELOG check, code spellchecker, CI etc\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/tests/testing-js","title":"How I test JS"}}},"pageContext":{"id":"d949cbcd-8cca-56bc-99a7-af00ca8961a9"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}