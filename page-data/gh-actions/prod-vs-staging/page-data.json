{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/gh-actions/prod-vs-staging","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Prod vs Staging GitHub Actions\"), mdx(\"p\", null, \"In the TypeScript website, deploys on staging vs prod are handled in different .yml files. \"), mdx(\"p\", null, \"This is OK, but a bit meh. When working on setting up staging vs prod for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://cloudcapture.it\"\n  }, \"cloudcapture.it\"), \",\\nI opted for trying to get both environments represented in the same yml file. After some faffing, I came up with a pretty elegant answer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yml\"\n  }, \"name: Upload infra\\n\\non:\\n  push:\\n    branches:\\n      - main\\n      - prod\\n\\njobs:\\n  build-and-deploy:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@master\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: \\\"12.x\\\"\\n      - run: \\\"yarn install\\\"\\n      - run: \\\"node scripts/repoLint.js\\\"\\n\\n      # To keep one yml, we set the environments for staging vs prod ahead of time\\n      - name: Set prod env\\n        if: ${{ github.ref == 'refs/heads/prod' }}\\n        run: |\\n          echo \\\"AZURE_STATIC_WEB_APPS_API_TOKEN=$(echo $PROD_AZURE_STATIC_WEB_APPS_API_TOKEN)\\\" >> $GITHUB_ENV\\n          echo \\\"FUNC_APP=kisservices-production\\\" >> $GITHUB_ENV\\n          echo \\\"FUNCS_URL=https://api.kisservices.dev\\\" >> $GITHUB_ENV\\n          echo \\\"FUNCTIONS_DEPLOY_PROFILE=$(echo $PROD_FUNCTIONS_DEPLOY_PROFILE)\\\" >> $GITHUB_ENV\\n          echo \\\"DEPLOY_TYPE=Prod\\\" >> $GITHUB_ENV\\n          echo \\\"STRIPE_PUB_KEY=pk_live_51HZNb0Kjk5Zy6fGqOq3GH9N5V9qokDWgofYc1xGJN6sQjBwAYPJciCUfpOC8EZoXqGvmQmoOSXmao39tgR28ov4a00JfWsUkxt\\\" >> $GITHUB_ENV\\n        env:\\n          PROD_AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROUD_GLACIER_0EE68890F }}\\n          PROD_FUNCTIONS_DEPLOY_PROFILE: ${{ secrets.KISS_DEPLOY_PROFILE }}\\n\\n      - name: Set staging env\\n        if: ${{ github.ref == 'refs/heads/main' }}\\n        run: |\\n          echo \\\"AZURE_STATIC_WEB_APPS_API_TOKEN=$(echo $STAGING_AZURE_STATIC_WEB_APPS_API_TOKEN)\\\" >> $GITHUB_ENV\\n          echo \\\"FUNC_APP=kisservices-staging\\\" >> $GITHUB_ENV\\n          echo \\\"FUNCS_URL=https://api-staging.kisservices.dev\\\" >> $GITHUB_ENV\\n          echo \\\"FUNCTIONS_DEPLOY_PROFILE=$(echo $STAGING_FUNCTIONS_DEPLOY_PROFILE)\\\" >> $GITHUB_ENV\\n          echo \\\"DEPLOY_TYPE=Staging\\\" >> $GITHUB_ENV\\n          echo \\\"STRIPE_PUB_KEY=pk_test_51HZNb0Kjk5Zy6fGqt3fg4DVedSdQiplNN4XzgAIzf7p26DVURQoplgyzrXzZw89l9It5ZZ2AuE3He8hh5qHymC7k00BXO6AIkT\\\" >> $GITHUB_ENV\\n        env:\\n          STAGING_AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ORANGE_FIELD_0B6DD910F }}\\n          STAGING_FUNCTIONS_DEPLOY_PROFILE: ${{ secrets.KISS_STAGING_DEPLOY_PROFILE }}\\n\\n      - run: \\\"yarn build\\\"\\n      - run: \\\"yarn test\\\"\\n      - run: \\\"yarn check-site\\\"\\n\\n      - name: Deploy Zoom Dashboard\\n        uses: Azure/static-web-apps-deploy@v0.0.1-preview\\n        with:\\n          action: \\\"upload\\\"\\n          app_artifact_location: \\\"public\\\"\\n          app_location: \\\"dashboard\\\"\\n          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}\\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\\n        env:\\n          KISS_SERVICES_FUNCS_URL: ${{ env.FUNCS_URL }}\\n          STRIPE_PUBLISHABLE_KEY: ${{ env.STRIPE_PUB_KEY }}\\n\\n      ## Upload the Subscriptions app\\n      - uses: Azure/functions-action@v1\\n        with:\\n          app-name: ${{ env.FUNC_APP }}\\n          publish-profile: ${{ env.FUNCTIONS_DEPLOY_PROFILE }}\\n          package: functions\\n\\n\")), mdx(\"h3\", null, \"The moving parts\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"if: ${{ github.ref == 'refs/heads/prod' }}\"), \" to scope the setting up of environment jobs\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For those actions, move the secrets into the ENV, then setting them \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"back\"), \" to the global ENV. Let's follow the setup for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FUNCTIONS_DEPLOY_PROFILE\"), \" which is basically the access token for uploading to azure. For example:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the staging job:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set the env var \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"STAGING_FUNCTIONS_DEPLOY_PROFILE\"), \" to the secret \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"${{ secrets.KISS_STAGING_DEPLOY_PROFILE }}\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Export the staging env var to the generally named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FUNCTIONS_DEPLOY_PROFILE\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"echo \\\"FUNCTIONS_DEPLOY_PROFILE=$(echo $STAGING_FUNCTIONS_DEPLOY_PROFILE)\\\" >> $GITHUB_ENV\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the prod job:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set the env var \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PROD_FUNCTIONS_DEPLOY_PROFILE\"), \" to the secret \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"${{ secrets.KISS_STAGING_DEPLOYKISS_DEPLOY_PROFILE_PROFILE }}\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Export the prod env var to the generally named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FUNCTIONS_DEPLOY_PROFILE\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"echo \\\"FUNCTIONS_DEPLOY_PROFILE=$(echo $PROD_FUNCTIONS_DEPLOY_PROFILE)\\\" >> $GITHUB_ENV\"))))), mdx(\"p\", null, \"After \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"either\"), \" of the prod or staging jobs have been finished, then you know that there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FUNCTIONS_DEPLOY_PROFILE\"), \" which either contains prod or staging data.\"), mdx(\"p\", null, \"Then you can rely on that ENV var, and you're good.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/gh-actions/prod-vs-staging","title":"Prod vs Staging GitHub Actions"}}},"pageContext":{"id":"17680b3e-9fa3-59ee-b64e-e9e171ae2e5d"}},"staticQueryHashes":["2221750479","2380733210","2768355698","433046095","63159454"]}