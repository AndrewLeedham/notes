{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/gh-actions/automating-ascii-screenshots","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Automating ASCII Screenshots\"), mdx(\"p\", null, \"I don't want to be recording stuff like the text output of a command on my own computer, CI should be the one doing derived work. So, I put together a bunch tools on GitHub Actions to record a CLI experience and generate a GIF of the terminal usage. \"), mdx(\"p\", null, \"This uses the techniques of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://asciinema.org\"\n  }, \"https://asciinema.org\"), \" - but doesn't use their web service, everything happens on CI. Note that you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GIFSICLE_OPTS\")), mdx(\"undefined\", null, mdx(\"pre\", {\n    \"className\": \"shiki github-light\",\n    \"style\": {\n      \"backgroundColor\": \"#fff\",\n      \"color\": \"#24292e\"\n    }\n  }, mdx(\"div\", {\n    parentName: \"pre\",\n    \"className\": \"code-container\"\n  }, mdx(\"code\", {\n    parentName: \"div\"\n  }, \"name: ci\\n\\non:\\n  push:\\n\\njobs:\\n  ci:\\n    runs-on: ubuntu-latest\\n    steps:\\n\\n    # Checkout and leave the chance for us to override the creds\\n    - uses: actions/checkout@v2\\n      with:\\n        persist-credentials: false \\n        fetch-depth: 0 \\n\\n    # My example is a Deno app\\n    - uses: denolib/setup-deno@v2\\n      with:\\n        deno-version: v1.x\\n\\n    # Need python set up because we use pip to grab asciicinema\\n    # which records a terminal session to a .json file\\n    - uses: actions/setup-python@v2\\n      with:\\n        python-version: 3.9\\n\\n    # My fork has hardcoded column and row widths \\n    # ( https://github.com/orta/asciinema/blob/develop/asciinema/term.py )\\n    - name: Setup\\n      run: |\\n        sudo pip install git+https://github.com/orta/asciinema.git\\n\\n    # Run the command in the context of asciinema\\n    - name: Run\\n      run: |\\n        asciinema rec recording.cast -c 'deno run index.ts'\\n\\n    # Use a third party action to write the GIF, it's a bunch\\n    # of docker faff, so worth the cost of the 3rd party dep\\n    - name: Asciicast file to GIF\\n      uses: dgzlopes/asciicast-to-gif-action@v1.0\\n      with:\\n        input: recording.cast\\n        output: screencast.gif\\n        theme: tango\\n        speed: 0.5\\n        scale: 0.8\\n      env:\\n        GIFSICLE_OPTS: --no-loopcount -k 64 -O2 -Okeep-empty\\n        WIDTH: 120\\n        HEIGHT: 100\\n\\n    # Now the GIF has been written, commit the GIF and push it to the repo\\n    - name: Run\\n      run: |\\n        git config --local user.email \\\"41898282+github-actions[bot]@users.noreply.github.com\\\"\\n        git config --local user.name \\\"github-actions[bot]\\\"\\n        git add screencast.gif\\n        git commit -m \\\"[skip ci] Update the screencast\\\" -a\\n\\n    - name: Push changes\\n      uses: ad-m/github-push-action@master\\n      with:\\n        github_token: ${{ secrets.GITHUB_TOKEN }}\\n        branch: ${{ github.ref }}\")))), mdx(\"p\", null, \"This creates:\"), mdx(\"img\", {\n    src: \"https://github.com/orta/tsc-cli-example/raw/master/screencast.gif\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/gh-actions/automating-ascii-screenshots","title":"automating-ascii-screenshots"}}},"pageContext":{"id":"7e9902ff-df8f-5276-bb1b-6d1f65ad3c88","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}