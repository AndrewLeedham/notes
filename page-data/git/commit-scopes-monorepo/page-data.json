{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/git/commit-scopes-monorepo","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Commit Messages With Monorepo Scopes\"), mdx(\"p\", null, \"I'm \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://artsy.github.io/blog/2016/03/02/Lazily-Automation/\"\n  }, \"lazy\"), \" - when I see my friends doing things I want to do but I know I can't be bothered to put the work in, I just automate a rough approximation. \"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/alloy/flow2dts/commits?author=alloy\"\n  }, \"@alloy\"), \" nearly always marks his commits with a context, e.g.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[overrides] Add Dimensions typings\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[package] Actually use our own generated files\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[polyfill] Make $TypeOf also return the class\"))), mdx(\"p\", null, \"This is cool, yeah, but I'm not going to remember to do this. Instead what I've been doing is automating that via git hooks.\"), mdx(\"p\", null, \"As I'm mostly in JS projects, I use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/husky/v/4.3.8\"\n  }, \"husky v4\"), \" to set up my hooks:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"husky\\\": {\\n    \\\"hooks\\\": {\\n      \\\"pre-commit\\\": \\\"yarn test && yarn danger local --dangerfile dangerfile.local.ts --staging\\\",\\n      \\\"pre-push\\\": \\\"yarn build && yarn test\\\",\\n      \\\"prepare-commit-msg\\\": \\\"node scripts/prefixCommitMsg.mjs\\\"\\n    }\\n  },\\n}\\n\")), mdx(\"p\", null, \"The key one being \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prepare-commit-msg\"), \" which runs a JS script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// @ts-check\\nimport fs from \\\"fs\\\"\\nimport { execSync } from \\\"child_process\\\"\\n\\nconst fileToEdit = process.env.HUSKY_GIT_PARAMS.split(\\\" \\\")[0]\\nconst files = execSync(\\\"git status --porcelain\\\", { encoding: \\\"utf8\\\" })\\n\\nconst maps = {\\n  \\\"spelltower/\\\": \\\"SPTWR\\\",\\n  \\\"typeshift/\\\": \\\"TPSFT\\\",\\n}\\n\\nconst prefixes = new Set()\\nfiles.split(\\\"\\\\n\\\").forEach(f => {\\n  const found = Object.keys(maps).find(prefix => f.includes(prefix))\\n  if (found) prefixes.add(maps[found])\\n})\\n\\nif (prefixes.size) {\\n  const prefix = [...prefixes.values()].sort().join(\\\", \\\")\\n  const msg = fs.readFileSync(fileToEdit, \\\"utf8\\\")\\n  if (!msg.includes(prefix)) {\\n    fs.writeFileSync(fileToEdit, `[${prefix}] ${msg}`)\\n  }\\n}\\n\")), mdx(\"p\", null, \"This JS script looks up what files were changed in the commit (via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git status\"), \"), and then adds a set of prefixes to the commit message.\"), mdx(\"p\", null, \"E.g. I make a change to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"games/spelltower/app.ts\"), \" then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[SPTWR]\"), \" is automatically added to commit message. \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/git/commit-scopes-monorepo","title":"Commit Messages With Monorepo Scopes"}}},"pageContext":{"id":"d3478557-490b-550c-804a-1bd6a402d641"}},"staticQueryHashes":["2221750479","2380733210","2768355698","433046095","63159454"]}